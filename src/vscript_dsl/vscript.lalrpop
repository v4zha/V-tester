use crate::vscript_dsl::ast::*;
use crate::vscript_dsl::dsl_errors::ParseError;

grammar;

pub Instructions:Result<Box<Instruction>,ParseError> = {
    r"\s*info\s*\{\s*" <i:Info> r"\s*\}\s*program\s*\{\s*" <p:Program> r"\s*\}\s*tests\s*\{\s*" <t:Tests> r"\s*\}\s*" =>Ok(Box::new(Instruction::new(i,p,t))),
    ! => Err(ParseError::SyntaxError),
}

ListSep<T>:Vec<T> = {
   <mut ele:(<T> ",")*> <end:T?> => match end{
      None=>ele,
      Some(end)=>{
         ele.push(end);
         ele
      }
   }
}

Info:Box<Info> = {
    <n:Name> r"\s*;\s*" <d:Desc> r"\s*;\s*" =>{
                                        let n=n.unwrap();
                                        let d=d.unwrap();
                                         Box::new(Info::new(n,d))
                                        },
}                                        

Program:Box<Program> = {
    <lang:Lang> r"\s*;\s*" <run_env:RunEnv> r"\s*;\s*" =>{
                                                    let lang=lang.unwrap();
                                                    let run_env=run_env.unwrap();
                                                    Box::new(Program::new(&lang,&run_env))
                                                },
}

Tests:Box<Tests> = {
    <tests:TestVec> => Box::new(Tests::new(tests)),
}

TestVec:Vec<Result<Test,ParseError>> = ListSep<Test>;

Name:Result<String,ParseError> ={
    r"\s*name\s*=\s*" <t:Term> => Ok(t),
    ! =>  Err(ParseError::FieldError("name".into()))  ,
}
Desc:Result<String,ParseError> ={
    r"\s*desc\s*=\s*" <t:Term> => Ok(t),
    ! =>   Err(ParseError::FieldError("desc".into())) ,
}
Lang:Result<String,ParseError> ={
    r"\s*lang\s*=\s*" <t:Term> => Ok(t),
    ! =>   Err(ParseError::FieldError("lang".into())) ,
}
RunEnv:Result<String,ParseError> ={
    r"\s*run_env\s*=\s*" <t:Term> => Ok(t),
    ! =>  Err(ParseError::FieldError("run_env".into())) ,
}

Term:String=r"[\w\s.?&]+"=> <>.to_string();

Test:Result<Test,ParseError> = {
   r"\s*\(\s*"<test_name:Term> r"\s*\)\s*\{\s*input\s*\[\s*" <inp:TestInp> r"\s*\]\s*output\s*\[\s*" <out:TestOut> r"\s*\]\s*\}\s*" =>{
      Ok(Test::new(test_name,inp,out))
   },
   ! => Err(ParseError::FieldError("Invalid Test".into())),
}
TestInp:Vec<String> = ListSep<Term>;

TestOut:Vec<String> = ListSep<Term>;